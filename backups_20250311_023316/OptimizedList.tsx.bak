import React, { useCallback, useState, useEffect, useRef } from 'react';

// Chinese comment replaced with English comment
type ItemRenderer<T> = (
  item: T,
  index: number,
  isVisible: boolean
) => React.ReactNode;

interface OptimizedListProps<T> {
  /** 要渲染的项目List */
  items: T[];
  /** 渲染单个List项的函数 */
  renderItem: ItemRenderer<T>;
  /** 项目高度 (px) */
  itemHeight: number;
  /** 容器高度 (px)，默认400px */
  height?: number;
  /** 在可视区域外预Loading的项目数量 */
  overscan?: number;
  /** 项目唯一标识的键 */
  getItemKey?: (item: T, index: number) => string | number;
  /** List容器的CSS类名 */
  className?: string;
  /** 空状态显示Content */
  emptyComponent?: React.ReactNode;
  /** Loading状态显示Content */
  loadingComponent?: React.ReactNode;
  /** 是否处于Loading状态 */
  isLoading?: boolean;
  /** 是否有更多数据 */
  hasMore?: boolean;
  /** Loading更多数据的回调函数 */
  onLoadMore?: () => void;
  /** Loading更多的阈值（距底部多少像素时触发），默认200px */
  loadMoreThreshold?: number;
}

/**
 * 优化List组件
 * 使用虚拟滚动技术高效渲染大量数据
 */
function OptimizedList<T>({
  items,
  renderItem,
  itemHeight,
  height = 400,
  overscan = 3,
  getItemKey = (_, index) => index,
  className = '',
  emptyComponent = <div className="p-8 text-center text-gray-500">没有可显示的数据</div>,
  loadingComponent = <div className="p-4 text-center text-gray-500">Loading中...</div>,
  isLoading = false,
  hasMore = false,
  onLoadMore,
  loadMoreThreshold = 200
}: OptimizedListProps<T>): React.ReactElement {
  // Chinese comment replaced with English comment
  const containerRef = useRef<HTMLDivElement>(null);
  // Chinese comment replaced with English comment
  const [scrollTop, setScrollTop] = useState(0);
  // Chinese comment replaced with English comment
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  
  // Chinese comment replaced with English comment
  const startIndex = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan);
  const visibleCount = Math.ceil(height / itemHeight) + 2 * overscan;
  const endIndex = Math.min(items.length - 1, startIndex + visibleCount);
  
  // Chinese comment replaced with English comment
  const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {
    const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;
    setScrollTop(scrollTop);
    
    // Chinese comment replaced with English comment
    if (
      hasMore && 
      !isLoadingMore && 
      onLoadMore && 
      scrollHeight - scrollTop - clientHeight < loadMoreThreshold
    ) {
      setIsLoadingMore(true);
      onLoadMore();
    }
  }, [hasMore, isLoadingMore, loadMoreThreshold, onLoadMore]);
  
  // Chinese comment replaced with English comment
  useEffect(() => {
    if (!isLoading) {
      setIsLoadingMore(false);
    }
  }, [isLoading]);
  
  // Chinese comment replaced with English comment
  const renderItems = () => {
    const visibleItems = [];
    
    for (let i = startIndex; i <= endIndex; i++) {
      const item = items[i];
      const key = getItemKey(item, i);
      const isVisible = true; // Chinese comment replaced with English comment
      
      visibleItems.push(
        <div
          key={key}
          style={{
            height: itemHeight,
            position: 'absolute',
            top: i * itemHeight,
            left: 0,
            right: 0,
            willChange: 'transform' // Chinese comment replaced with English comment
          }}
          data-index={i}
        >
          {renderItem(item, i, isVisible)}
        </div>
      );
    }
    
    return visibleItems;
  };
  
  // Chinese comment replaced with English comment
  if (items.length === 0 && !isLoading) {
    return <div className={className}>{emptyComponent}</div>;
  }
  
  return (
    <div className={`optimized-list ${className}`}>
      {/* 主List容器 */}
      <div
        ref={containerRef}
        onScroll={handleScroll}
        className="overflow-y-auto relative"
        style={{ height }}
      >
        {/* 项目定位容器 */}
        <div
          className="relative"
          style={{ height: items.length * itemHeight }}
        >
          {renderItems()}
        </div>
        
        {/* Loading中指示器 */}
        {(isLoading || isLoadingMore) && (
          <div className="py-4">{loadingComponent}</div>
        )}
      </div>
    </div>
  );
}

export default OptimizedList; 