import React, { useState } from 'react';
import Image from 'next/image';
import { formatDistanceToNow } from 'date-fns';
import { zhCN } from 'date-fns/locale';
import { FiMessageSquare, FiHeart, FiShare2, FiMoreHorizontal, FiThumbsUp, FiThumbsDown } from 'react-icons/fi';

// Chinese comment replaced with English comment
export interface DiscussionThreadProps {
  id: string;
  title: string;
  content: string;
  author: {
    id: string;
    name: string;
    avatar: string;
  };
  createdAt: Date;
  updatedAt?: Date;
  likes: number;
  replies: number;
  tags?: string[];
  isLiked?: boolean;
  isInstructorResponse?: boolean;
  isFeatured?: boolean;
  courseId?: string;
  lessonId?: string;
}

// Chinese comment replaced with English comment
const DiscussionThread: React.FC<DiscussionThreadProps> = ({ 
  id, 
  title, 
  content, 
  author, 
  createdAt, 
  updatedAt, 
  likes, 
  replies, 
  tags = [], 
  isLiked = false, 
  isInstructorResponse = false,
  isFeatured = false,
  courseId,
  lessonId
}) => {
  const [liked, setLiked] = useState(isLiked);
  const [likeCount, setLikeCount] = useState(likes);
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  // Chinese comment replaced with English comment
  const timeAgo = formatDistanceToNow(new Date(createdAt), { 
    addSuffix: true,
    locale: zhCN 
  });

  // Chinese comment replaced with English comment
  const handleLike = () => {
    if (liked) {
      setLikeCount(prev => prev - 1);
    } else {
      setLikeCount(prev => prev + 1);
    }
    setLiked(!liked);
    
    // Chinese comment replaced with English comment
  };

  // Chinese comment replaced with English comment
  const handleShare = () => {
    // Chinese comment replaced with English comment
    const discussionUrl = `${window.location.origin}/courses/discussions/${id}`;
    navigator.clipboard.writeText(discussionUrl);
    
    // Chinese comment replaced with English comment
    alert('链接已复制到剪贴板');
  };

  // Chinese comment replaced with English comment
  const contentPreview = content.length > 300 ? `${content.substring(0, 300)}...` : content;

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-5 border border-gray-200 dark:border-gray-700">
      {/* 标签和状态指示器 */}
      <div className="flex items-center flex-wrap gap-2 mb-3">
        {isFeatured && (
          <div className="px-2 py-1 bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-400 text-xs rounded-full">
            精选
          </div>
        )}
        
        {isInstructorResponse && (
          <div className="px-2 py-1 bg-primary-100 dark:bg-primary-900/30 text-primary-800 dark:text-primary-400 text-xs rounded-full">
            Instructor回答
          </div>
        )}
        
        {tags.map((tag, index) => (
          <div key={index} className="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-xs rounded-full">
            {tag}
          </div>
        ))}
      </div>
      
      {/* 讨论Title */}
      <div className="mb-3">
        <h3 className="text-xl font-bold text-gray-900 dark:text-white">
          {title}
        </h3>
      </div>
      
      {/* AuthorInformation和Post时间 */}
      <div className="flex items-center mb-4">
        <div className="w-10 h-10 rounded-full overflow-hidden mr-3">
          {author.avatar ? (
            <Image
              src={author.avatar}
              alt={author.name}
              width={40}
              height={40}
              className="object-cover"
            />
          ) : (
            <div className="w-full h-full bg-gray-300 dark:bg-gray-600 flex items-center justify-center">
              <FiUser className="text-gray-500 dark:text-gray-400" />
            </div>
          )}
        </div>
        <div>
          <div className="font-medium text-gray-900 dark:text-white">
            {author.name}
          </div>
          <div className="text-sm text-gray-500 dark:text-gray-400">
            {timeAgo}
          </div>
        </div>
      </div>
      
      {/* 讨论Content */}
      <div className="prose dark:prose-invert max-w-none mb-4">
        <p className="text-gray-700 dark:text-gray-300">
          {contentPreview}
        </p>
      </div>
      
      {/* 互动按钮 */}
      <div className="flex items-center justify-between pt-4 border-t border-gray-200 dark:border-gray-700">
        <div className="flex space-x-4">
          <button 
            onClick={handleLike}
            className={`flex items-center text-sm ${
              liked 
                ? 'text-primary-600 dark:text-primary-400' 
                : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'
            }`}
          >
            <FiHeart className={`mr-1 ${liked ? 'fill-current' : ''}`} />
            <span>{likeCount}</span>
          </button>
          
          <button className="flex items-center text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white">
            <FiMessageSquare className="mr-1" />
            <span>{replies}</span>
          </button>
          
          <button 
            onClick={handleShare}
            className="flex items-center text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white"
          >
            <FiShare2 className="mr-1" />
            <span>分享</span>
          </button>
        </div>
        
        <div className="relative">
          <button 
            onClick={() => setIsMenuOpen(!isMenuOpen)}
            className="text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white p-1"
          >
            <FiMoreHorizontal />
          </button>
          
          {isMenuOpen && (
            <div className="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg py-1 z-10 border border-gray-200 dark:border-gray-700">
              <button className="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
                收藏讨论
              </button>
              <button className="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
                关注讨论
              </button>
              <button className="block w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20">
                Report
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default DiscussionThread; 