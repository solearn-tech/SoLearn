import React, { useState } from 'react';
import Image from 'next/image';
import { FiUser, FiHeart, FiMessageSquare, FiMoreHorizontal, FiEdit2, FiTrash2 } from 'react-icons/fi';

// Chinese comment replaced with English comment
export interface DiscussionReplyProps {
  id: string;
  content: string;
  author: {
    id: string;
    name: string;
    avatar: string;
  };
  createdAt: string;
  likes: number;
  isLiked?: boolean;
  isAuthor?: boolean;
  isInstructorResponse?: boolean;
  parentId?: string;
  onReply?: (parentId: string) => void;
  onDelete?: (id: string) => void;
  onEdit?: (id: string, content: string) => void;
}

// Chinese comment replaced with English comment
const DiscussionReply: React.FC<DiscussionReplyProps> = ({
  id,
  content,
  author,
  createdAt,
  likes,
  isLiked = false,
  isAuthor = false,
  isInstructorResponse = false,
  parentId,
  onReply,
  onDelete,
  onEdit
}) => {
  const [liked, setLiked] = useState(isLiked);
  const [likeCount, setLikeCount] = useState(likes);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editContent, setEditContent] = useState(content);

  // Chinese comment replaced with English comment
  const handleLike = () => {
    if (liked) {
      setLikeCount(prev => prev - 1);
    } else {
      setLikeCount(prev => prev + 1);
    }
    setLiked(!liked);
    
    // Chinese comment replaced with English comment
  };

  // Chinese comment replaced with English comment
  const handleReply = () => {
    if (onReply) {
      onReply(id);
    }
  };

  // Chinese comment replaced with English comment
  const handleEdit = () => {
    setIsEditing(true);
    setIsMenuOpen(false);
  };

  // Chinese comment replaced with English comment
  const handleDelete = () => {
    if (onDelete) {
      onDelete(id);
    }
    setIsMenuOpen(false);
  };

  // Chinese comment replaced with English comment
  const saveEdit = () => {
    if (onEdit) {
      onEdit(id, editContent);
    }
    setIsEditing(false);
  };

  // Chinese comment replaced with English comment
  const cancelEdit = () => {
    setEditContent(content);
    setIsEditing(false);
  };

  return (
    <div className={`p-4 rounded-lg ${isInstructorResponse ? 'bg-primary-50 dark:bg-primary-900/10 border border-primary-100 dark:border-primary-900/30' : 'bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700'}`}>
      <div className="flex">
        {/* Author头像 */}
        <div className="mr-3">
          <div className="w-8 h-8 rounded-full overflow-hidden">
            {author.avatar ? (
              <Image
                src={author.avatar}
                alt={author.name}
                width={32}
                height={32}
                className="object-cover"
              />
            ) : (
              <div className="w-full h-full bg-gray-300 dark:bg-gray-600 flex items-center justify-center">
                <FiUser className="text-gray-500 dark:text-gray-400" size={16} />
              </div>
            )}
          </div>
        </div>
        
        {/* ReplyContent */}
        <div className="flex-1">
          <div className="flex items-center justify-between mb-1">
            <div className="flex items-center">
              <span className="font-medium text-gray-900 dark:text-white mr-2">
                {author.name}
              </span>
              {isInstructorResponse && (
                <span className="px-2 py-0.5 bg-primary-100 dark:bg-primary-900/30 text-primary-800 dark:text-primary-400 text-xs rounded-full">
                  Instructor
                </span>
              )}
              <span className="text-xs text-gray-500 dark:text-gray-400 ml-2">
                {createdAt}
              </span>
            </div>
            
            {/* 操作菜单 */}
            {(isAuthor || onReply) && (
              <div className="relative">
                <button 
                  onClick={() => setIsMenuOpen(!isMenuOpen)}
                  className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 p-1"
                >
                  <FiMoreHorizontal size={16} />
                </button>
                
                {isMenuOpen && (
                  <div className="absolute right-0 mt-1 w-40 bg-white dark:bg-gray-800 rounded-md shadow-lg py-1 z-10 border border-gray-200 dark:border-gray-700">
                    {onReply && (
                      <button 
                        onClick={handleReply}
                        className="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
                      >
                        Reply
                      </button>
                    )}
                    {isAuthor && (
                      <>
                        <button 
                          onClick={handleEdit}
                          className="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
                        >
                          <FiEdit2 className="inline mr-2" size={14} />
                          Edit
                        </button>
                        <button 
                          onClick={handleDelete}
                          className="block w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20"
                        >
                          <FiTrash2 className="inline mr-2" size={14} />
                          Delete
                        </button>
                      </>
                    )}
                  </div>
                )}
              </div>
            )}
          </div>
          
          {/* Edit模式 */}
          {isEditing ? (
            <div className="mb-2">
              <textarea
                value={editContent}
                onChange={(e) => setEditContent(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white text-sm mb-2"
                rows={3}
              />
              <div className="flex justify-end space-x-2">
                <button
                  onClick={cancelEdit}
                  className="px-3 py-1 text-xs border border-gray-300 dark:border-gray-600 rounded text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
                >
                  Cancel
                </button>
                <button
                  onClick={saveEdit}
                  className="px-3 py-1 text-xs bg-primary-600 hover:bg-primary-700 text-white rounded"
                >
                  Save
                </button>
              </div>
            </div>
          ) : (
            <div className="text-gray-700 dark:text-gray-300 text-sm mb-2">
              {content}
            </div>
          )}
          
          {/* Like和Reply按钮 */}
          <div className="flex items-center space-x-4">
            <button
              onClick={handleLike}
              className={`flex items-center text-xs ${
                liked
                  ? 'text-primary-600 dark:text-primary-400'
                  : 'text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'
              }`}
            >
              <FiHeart className={`mr-1 ${liked ? 'fill-current' : ''}`} size={14} />
              <span>{likeCount}</span>
            </button>
            
            {onReply && (
              <button
                onClick={handleReply}
                className="flex items-center text-xs text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
              >
                <FiMessageSquare className="mr-1" size={14} />
                <span>Reply</span>
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default DiscussionReply; 