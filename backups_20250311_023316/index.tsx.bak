import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import { FiPlus, FiSearch, FiFilter, FiChevronDown } from 'react-icons/fi';
import { WalletContextProvider, useWallet } from '../../../contexts/WalletContext';

import DiscussionThread from '../../../components/discussions/DiscussionThread';

// Chinese comment replaced with English comment
const mockDiscussions = [
  {
    id: '1',
    title: 'Solana 账户模型中 PDA 的最佳实践',
    content: '在开发 Solana 智能合约时，我遇到了一些关于程序派生地址（PDA）的Question。当我需要管理多个相互关联的账户时，我不确定应该使用一个 PDA 来存储所有数据，还是创建多个 PDA。有人能分享一下最佳实践吗？',
    author: {
      id: 'user1',
      name: '区块链学习者',
      avatar: '/images/avatars/user1.jpg'
    },
    createdAt: new Date('2023-03-15T09:30:00'),
    updatedAt: null,
    likes: 24,
    replies: 8,
    tags: ['账户模型', 'PDA', 'Solana'],
    isLiked: false,
    isFeatured: true,
    courseId: '1'
  },
  {
    id: '2',
    title: '如何处理 Solana 程序中的Error？',
    content: '我正在编写我的第一个 Solana 程序，但对Error处理感到困惑。在什么情况下应该使用 Result 类型，什么时候应该使用 panic? 此外，如何在客户端代码中优雅地处理这些Error？',
    author: {
      id: 'user2',
      name: '编程新手',
      avatar: '/images/avatars/user2.jpg'
    },
    createdAt: new Date('2023-03-17T14:20:00'),
    updatedAt: null,
    likes: 15,
    replies: 12,
    tags: ['Error处理', 'Rust', 'Solana'],
    isLiked: true,
    isFeatured: false,
    courseId: '1'
  },
  {
    id: '3',
    title: 'Anchor vs 原生 Solana 程序开发：优缺点分析',
    content: '作为一名有经验的开发者，我对是否应该使用 Anchor 框架来开发 Solana 程序存在疑问。一方面，Anchor 简化了很多样板代码；另一方面，我担心使用框架会限制我对底层的理解和控制。大家有什么观点？',
    author: {
      id: 'user3',
      name: '资深开发者',
      avatar: '/images/avatars/user3.jpg'
    },
    createdAt: new Date('2023-03-20T18:45:00'),
    updatedAt: new Date('2023-03-21T10:30:00'),
    likes: 42,
    replies: 25,
    tags: ['Anchor', '框架', 'Solana'],
    isLiked: false,
    isFeatured: false,
    courseId: '3'
  },
  {
    id: '4',
    title: '关于 Solana 上的 NFT 生成Question',
    content: '我在尝试创建一个生成式 NFT 项目，但对元数据存储方式存在疑问。应该把图像数据存储在链上还是 Arweave？有什么推荐的方法来减少铸造 NFT 的成本？',
    author: {
      id: 'user4',
      name: 'NFT爱好者',
      avatar: '/images/avatars/user4.jpg'
    },
    createdAt: new Date('2023-03-22T08:15:00'),
    updatedAt: null,
    likes: 18,
    replies: 7,
    tags: ['NFT', 'Metaplex', 'Arweave'],
    isLiked: false,
    isFeatured: true,
    courseId: '5'
  },
  {
    id: '5',
    title: '编译 Solana 程序时遇到的Error',
    content: '当我尝试编译我的 Solana 程序时，遇到了这个Error："Generic arguments must be specified for an associated type." 我已经检查了我的代码，但找不到Question所在。有人能帮我解决吗？',
    author: {
      id: 'user5',
      name: '编译困难户',
      avatar: '/images/avatars/user5.jpg'
    },
    createdAt: new Date('2023-03-23T16:40:00'),
    updatedAt: null,
    likes: 5,
    replies: 3,
    tags: ['编译Error', 'Rust', 'Solana'],
    isLiked: false,
    isFeatured: false,
    courseId: '3'
  }
];

// Chinese comment replaced with English comment
const DiscussionsPage = () => {
  const { connected } = useWallet();
  const [discussions, setDiscussions] = useState(mockDiscussions);
  const [filteredDiscussions, setFilteredDiscussions] = useState(mockDiscussions);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCourse, setSelectedCourse] = useState('all');
  const [selectedTags, setSelectedTags] = useState<string[]>([]);
  const [sortBy, setSortBy] = useState('recent');
  const [showFilters, setShowFilters] = useState(false);

  // Chinese comment replaced with English comment
  const courseOptions = [
    { id: 'all', name: '所有Course' },
    { id: '1', name: 'Solana 区块链开发入门' },
    { id: '3', name: 'Web3 前端开发实战' },
    { id: '5', name: 'NFT 市场开发指南' }
  ];

  // Chinese comment replaced with English comment
  const allTags = Array.from(
    new Set(
      discussions.flatMap(discussion => discussion.tags || [])
    )
  );

  // Chinese comment replaced with English comment
  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };

  // Chinese comment replaced with English comment
  const handleTagSelect = (tag: string) => {
    if (selectedTags.includes(tag)) {
      setSelectedTags(selectedTags.filter(t => t !== tag));
    } else {
      setSelectedTags([...selectedTags, tag]);
    }
  };

  // Chinese comment replaced with English comment
  useEffect(() => {
    let result = [...mockDiscussions];
    
    // Chinese comment replaced with English comment
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      result = result.filter(discussion => 
        discussion.title.toLowerCase().includes(term) || 
        discussion.content.toLowerCase().includes(term) ||
        (discussion.tags && discussion.tags.some(tag => tag.toLowerCase().includes(term)))
      );
    }
    
    // Chinese comment replaced with English comment
    if (selectedCourse !== 'all') {
      result = result.filter(discussion => discussion.courseId === selectedCourse);
    }
    
    // Chinese comment replaced with English comment
    if (selectedTags.length > 0) {
      result = result.filter(discussion => 
        discussion.tags && discussion.tags.some(tag => selectedTags.includes(tag))
      );
    }
    
    // Chinese comment replaced with English comment
    switch (sortBy) {
      case 'recent':
        result.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());
        break;
      case 'likes':
        result.sort((a, b) => b.likes - a.likes);
        break;
      case 'replies':
        result.sort((a, b) => b.replies - a.replies);
        break;
      case 'updated':
        result.sort((a, b) => {
          const aDate = a.updatedAt || a.createdAt;
          const bDate = b.updatedAt || b.createdAt;
          return bDate.getTime() - aDate.getTime();
        });
        break;
      default:
        break;
    }
    
    setFilteredDiscussions(result);
  }, [searchTerm, selectedCourse, selectedTags, sortBy]);

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <Head>
        <title>Course讨论区 | SoLearn</title>
        <meta name="description" content="参与 SoLearn 平台上关于区块链和 Solana 开发的讨论" />
      </Head>

      <main className="container mx-auto px-4 py-8">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">Course讨论区</h1>
            <p className="text-gray-600 dark:text-gray-400">
              与其他学习者分享知识、提问和讨论CourseContent
            </p>
          </div>
          
          <Link href="/courses/discussions/new">
            <a className="mt-4 md:mt-0 px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg shadow-sm flex items-center">
              <FiPlus className="mr-2" />
              发起讨论
            </a>
          </Link>
        </div>
        
        {/* Search和Filter */}
        <div className="mb-6">
          <div className="flex flex-col md:flex-row gap-4 mb-4">
            {/* Search框 */}
            <div className="relative flex-grow">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FiSearch className="text-gray-400" />
              </div>
              <input
                type="text"
                className="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-primary-500 focus:border-primary-500"
                placeholder="Search讨论、标签或关键词"
                value={searchTerm}
                onChange={handleSearch}
              />
            </div>
            
            {/* Course选择 */}
            <div className="md:w-64">
              <select
                value={selectedCourse}
                onChange={(e) => setSelectedCourse(e.target.value)}
                className="block w-full pl-3 pr-10 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 appearance-none focus:ring-primary-500 focus:border-primary-500"
              >
                {courseOptions.map(course => (
                  <option key={course.id} value={course.id}>
                    {course.name}
                  </option>
                ))}
              </select>
            </div>
            
            {/* Filter按钮 */}
            <button
              onClick={() => setShowFilters(!showFilters)}
              className="flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700"
            >
              <FiFilter className="mr-2" />
              Filter
              {selectedTags.length > 0 && (
                <span className="ml-2 bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400 text-xs rounded-full px-2 py-0.5">
                  {selectedTags.length}
                </span>
              )}
            </button>
            
            {/* Sort下拉菜单 */}
            <div className="relative">
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="block w-full pl-3 pr-10 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 appearance-none focus:ring-primary-500 focus:border-primary-500"
              >
                <option value="recent">最新Post</option>
                <option value="updated">最近更新</option>
                <option value="likes">最多Like</option>
                <option value="replies">最多Reply</option>
              </select>
              <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                <FiChevronDown className="text-gray-400" />
              </div>
            </div>
          </div>
          
          {/* 标签Filter */}
          {showFilters && (
            <div className="p-4 bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mt-4">
              <h3 className="font-medium text-gray-900 dark:text-white mb-3">按标签Filter</h3>
              <div className="flex flex-wrap gap-2">
                {allTags.map(tag => (
                  <button
                    key={tag}
                    onClick={() => handleTagSelect(tag)}
                    className={`px-3 py-1 rounded-full text-sm ${
                      selectedTags.includes(tag)
                        ? 'bg-primary-100 dark:bg-primary-900 text-primary-600 dark:text-primary-400'
                        : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                    }`}
                  >
                    {tag}
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>
        
        {/* 讨论List */}
        {filteredDiscussions.length > 0 ? (
          <div className="space-y-4">
            {filteredDiscussions.map(discussion => (
              <Link key={discussion.id} href={`/courses/discussions/${discussion.id}`}>
                <a className="block">
                  <DiscussionThread
                    id={discussion.id}
                    title={discussion.title}
                    content={discussion.content}
                    author={discussion.author}
                    createdAt={discussion.createdAt}
                    updatedAt={discussion.updatedAt}
                    likes={discussion.likes}
                    replies={discussion.replies}
                    tags={discussion.tags}
                    isLiked={discussion.isLiked}
                    isFeatured={discussion.isFeatured}
                    courseId={discussion.courseId}
                  />
                </a>
              </Link>
            ))}
          </div>
        ) : (
          <div className="text-center py-12 bg-white dark:bg-gray-800 rounded-lg shadow-sm">
            <div className="text-gray-400 dark:text-gray-500 mb-4">
              <FiMessageSquare size={48} className="mx-auto" />
            </div>
            <h3 className="text-xl font-medium text-gray-900 dark:text-white mb-2">未找到讨论</h3>
            <p className="text-gray-600 dark:text-gray-400 mb-6">
              尝试调整你的Filter条件或Search其他关键词
            </p>
            <button
              onClick={() => {
                setSearchTerm('');
                setSelectedCourse('all');
                setSelectedTags([]);
                setSortBy('recent');
              }}
              className="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg shadow-sm"
            >
              清除所有Filter
            </button>
          </div>
        )}
      </main>
    </div>
  );
};

// Chinese comment replaced with English comment
export default function Discussions() {
  return (
    <WalletContextProvider>
      <DiscussionsPage />
    </WalletContextProvider>
  );
} 