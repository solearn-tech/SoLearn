import React, { useState, useEffect, createContext, useContext } from 'react';
import { createPortal } from 'react-dom';
import { 
  FiCheck, 
  FiAlertCircle, 
  FiInfo, 
  FiX,
  FiAlertTriangle
} from 'react-icons/fi';

// Chinese comment replaced with English comment
export type ToastType = 'success' | 'error' | 'info' | 'warning';

// Chinese comment replaced with English comment
export interface ToastMessage {
  id: string;
  type: ToastType;
  title?: string;
  message: string;
  duration?: number; // Chinese comment replaced with English comment
  closable?: boolean; // Chinese comment replaced with English comment
}

// Chinese comment replaced with English comment
interface ToastContextProps {
  toasts: ToastMessage[];
  addToast: (toast: Omit<ToastMessage, 'id'>) => string;
  removeToast: (id: string) => void;
  clearToasts: () => void;
}

// Chinese comment replaced with English comment
const ToastContext = createContext<ToastContextProps | undefined>(undefined);

// Chinese comment replaced with English comment
const toastIcons = {
  success: <FiCheck />,
  error: <FiAlertCircle />,
  info: <FiInfo />,
  warning: <FiAlertTriangle />
};

// Chinese comment replaced with English comment
const toastColors = {
  success: 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800 text-green-800 dark:text-green-200',
  error: 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800 text-red-800 dark:text-red-200',
  info: 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800 text-blue-800 dark:text-blue-200',
  warning: 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800 text-yellow-800 dark:text-yellow-200'
};

// Chinese comment replaced with English comment
const iconColors = {
  success: 'bg-green-100 dark:bg-green-800 text-green-600 dark:text-green-300',
  error: 'bg-red-100 dark:bg-red-800 text-red-600 dark:text-red-300',
  info: 'bg-blue-100 dark:bg-blue-800 text-blue-600 dark:text-blue-300',
  warning: 'bg-yellow-100 dark:bg-yellow-800 text-yellow-600 dark:text-yellow-300'
};

/**
 * 单个ToastNotification组件
 */
interface ToastProps {
  toast: ToastMessage;
  onClose: (id: string) => void;
}

const Toast: React.FC<ToastProps> = ({ toast, onClose }) => {
  const [isExiting, setIsExiting] = useState(false);

  useEffect(() => {
    const duration = toast.duration || 5000;
    
    // Chinese comment replaced with English comment
    const timer = setTimeout(() => {
      setIsExiting(true);
      
      // Chinese comment replaced with English comment
      setTimeout(() => {
        onClose(toast.id);
      }, 300);
    }, duration);
    
    return () => {
      clearTimeout(timer);
    };
  }, [toast, onClose]);
  
  // Chinese comment replaced with English comment
  const handleClose = () => {
    setIsExiting(true);
    setTimeout(() => {
      onClose(toast.id);
    }, 300);
  };
  
  return (
    <div
      className={`flex items-start p-4 mb-3 rounded-lg border shadow-sm transition-all duration-300 ${
        isExiting ? 'opacity-0 transform translate-x-full' : 'opacity-100'
      } ${toastColors[toast.type]}`}
      role="alert"
    >
      <div className={`flex-shrink-0 w-10 h-10 rounded-full ${iconColors[toast.type]} flex items-center justify-center mr-4`}>
        {toastIcons[toast.type]}
      </div>
      
      <div className="flex-grow">
        {toast.title && (
          <h3 className="font-medium mb-1">{toast.title}</h3>
        )}
        <div className="text-sm">{toast.message}</div>
      </div>
      
      {toast.closable !== false && (
        <button
          aria-label="关闭"
          onClick={handleClose}
          className="ml-4 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 focus:outline-none"
        >
          <FiX />
        </button>
      )}
    </div>
  );
};

/**
 * Toast容器组件
 */
const ToastContainer: React.FC = () => {
  const context = useContext(ToastContext);
  
  if (!context) {
    throw new Error('ToastContainer must be used within a ToastProvider');
  }
  
  const { toasts, removeToast } = context;
  
  // Chinese comment replaced with English comment
  return typeof window !== 'undefined' 
    ? createPortal(
        <div className="fixed top-4 right-4 z-50 max-w-md">
          {toasts.map((toast) => (
            <Toast key={toast.id} toast={toast} onClose={removeToast} />
          ))}
        </div>,
        document.body
      )
    : null;
};

/**
 * Toast提供者组件
 */
interface ToastProviderProps {
  children: React.ReactNode;
}

export const ToastProvider: React.FC<ToastProviderProps> = ({ children }) => {
  const [toasts, setToasts] = useState<ToastMessage[]>([]);
  
  // Chinese comment replaced with English comment
  const addToast = (toast: Omit<ToastMessage, 'id'>) => {
    const id = Math.random().toString(36).substring(2, 9);
    const newToast = { id, ...toast };
    setToasts((prev) => [...prev, newToast]);
    return id;
  };
  
  // Chinese comment replaced with English comment
  const removeToast = (id: string) => {
    setToasts((prev) => prev.filter((toast) => toast.id !== id));
  };
  
  // Chinese comment replaced with English comment
  const clearToasts = () => {
    setToasts([]);
  };
  
  const contextValue = { toasts, addToast, removeToast, clearToasts };
  
  return (
    <ToastContext.Provider value={contextValue}>
      {children}
      <ToastContainer />
    </ToastContext.Provider>
  );
};

/**
 * 使用Toast的自定义Hook
 */
export const useToast = () => {
  const context = useContext(ToastContext);
  
  if (!context) {
    throw new Error('useToast must be used within a ToastProvider');
  }
  
  // Chinese comment replaced with English comment
  const success = (message: string, options?: Partial<Omit<ToastMessage, 'id' | 'type' | 'message'>>) => {
    return context.addToast({ type: 'success', message, ...options });
  };
  
  const error = (message: string, options?: Partial<Omit<ToastMessage, 'id' | 'type' | 'message'>>) => {
    return context.addToast({ type: 'error', message, ...options });
  };
  
  const info = (message: string, options?: Partial<Omit<ToastMessage, 'id' | 'type' | 'message'>>) => {
    return context.addToast({ type: 'info', message, ...options });
  };
  
  const warning = (message: string, options?: Partial<Omit<ToastMessage, 'id' | 'type' | 'message'>>) => {
    return context.addToast({ type: 'warning', message, ...options });
  };
  
  return {
    ...context,
    success,
    error,
    info,
    warning
  };
};

export default Toast; 