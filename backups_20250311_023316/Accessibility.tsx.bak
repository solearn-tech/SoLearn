import React, { 
  useState, 
  useEffect, 
  useRef, 
  KeyboardEvent,
  FocusEvent,
  ReactNode,
  forwardRef,
  useId
} from 'react';

/**
 * 无障碍按钮组件
 * 符合WCAG 2.1 标准
 */
interface AccessibleButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'ghost';
  size?: 'small' | 'medium' | 'large';
  isLoading?: boolean;
  icon?: ReactNode;
  iconPosition?: 'left' | 'right';
  fullWidth?: boolean;
}

export const AccessibleButton = forwardRef<HTMLButtonElement, AccessibleButtonProps>(
  (
    {
      children,
      variant = 'primary',
      size = 'medium',
      isLoading = false,
      disabled = false,
      icon,
      iconPosition = 'left',
      fullWidth = false,
      className = '',
      ...props
    },
    ref
  ) => {
    const isDisabled = disabled || isLoading;
    
    // Chinese comment replaced with English comment
    const getVariantClasses = () => {
      switch (variant) {
        case 'secondary':
          return 'bg-gray-100 hover:bg-gray-200 text-gray-800 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-white';
        case 'ghost':
          return 'bg-transparent hover:bg-gray-100 text-gray-700 dark:hover:bg-gray-800 dark:text-gray-300';
        case 'primary':
        default:
          return 'bg-primary-600 hover:bg-primary-700 text-white dark:bg-primary-700 dark:hover:bg-primary-600';
      }
    };
    
    // Chinese comment replaced with English comment
    const getSizeClasses = () => {
      switch (size) {
        case 'small':
          return 'px-3 py-1.5 text-sm';
        case 'large':
          return 'px-6 py-3 text-lg';
        case 'medium':
        default:
          return 'px-4 py-2';
      }
    };
    
    const baseClasses = `
      inline-flex items-center justify-center
      font-medium rounded-lg
      transition-colors duration-200
      focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500
      disabled:opacity-60 disabled:cursor-not-allowed
    `;
    
    const widthClass = fullWidth ? 'w-full' : '';
    
    return (
      <button
        ref={ref}
        disabled={isDisabled}
        className={`
          ${baseClasses}
          ${getVariantClasses()}
          ${getSizeClasses()}
          ${widthClass}
          ${className}
        `}
        {...props}
      >
        {isLoading ? (
          <>
            <span className="animate-spin mr-2 h-4 w-4 border-2 border-t-transparent border-primary-100 rounded-full"></span>
            Loading中...
          </>
        ) : (
          <>
            {icon && iconPosition === 'left' && <span className="mr-2">{icon}</span>}
            {children}
            {icon && iconPosition === 'right' && <span className="ml-2">{icon}</span>}
          </>
        )}
      </button>
    );
  }
);

AccessibleButton.displayName = 'AccessibleButton';

/**
 * 无障碍表单标签组件
 * 确保与表单控件正确关联
 */
interface AccessibleLabelProps extends React.LabelHTMLAttributes<HTMLLabelElement> {
  isRequired?: boolean;
  optionalText?: string;
  helpText?: string;
  error?: string;
}

export const AccessibleLabel = forwardRef<HTMLLabelElement, AccessibleLabelProps>(
  (
    {
      children,
      isRequired = false,
      optionalText = '(可选)',
      helpText,
      error,
      className = '',
      ...props
    },
    ref
  ) => {
    return (
      <div className="mb-2">
        <label
          ref={ref}
          className={`block font-medium text-gray-700 dark:text-gray-300 ${className}`}
          {...props}
        >
          {children}
          {!isRequired && (
            <span className="ml-1 text-sm font-normal text-gray-500 dark:text-gray-400">
              {optionalText}
            </span>
          )}
          
          {isRequired && (
            <span className="ml-1 text-red-500" aria-hidden="true">
              *
            </span>
          )}
        </label>
        
        {helpText && (
          <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">{helpText}</p>
        )}
        
        {error && (
          <p className="mt-1 text-sm text-red-600 dark:text-red-400" aria-live="polite">{error}</p>
        )}
      </div>
    );
  }
);

AccessibleLabel.displayName = 'AccessibleLabel';

/**
 * 无障碍输入框组件
 * 支持辅助技术和键盘操作
 */
interface AccessibleInputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {
  label: string;
  error?: string;
  helpText?: string;
  size?: 'small' | 'medium' | 'large';
  startIcon?: ReactNode;
  endIcon?: ReactNode;
  isRequired?: boolean;
}

export const AccessibleInput = forwardRef<HTMLInputElement, AccessibleInputProps>(
  (
    {
      label,
      error,
      helpText,
      className = '',
      size = 'medium',
      startIcon,
      endIcon,
      isRequired = false,
      id: propId,
      ...props
    },
    ref
  ) => {
    // Chinese comment replaced with English comment
    const generatedId = useId();
    const id = propId || `input-${generatedId}`;
    const descriptionId = error ? `${id}-error` : helpText ? `${id}-description` : undefined;
    
    // Chinese comment replaced with English comment
    const getSizeClasses = () => {
      switch (size) {
        case 'small':
          return 'py-1.5 text-sm';
        case 'large':
          return 'py-3 text-lg';
        case 'medium':
        default:
          return 'py-2';
      }
    };
    
    const inputClasses = `
      block w-full 
      rounded-lg 
      border 
      ${error ? 'border-red-300 dark:border-red-600' : 'border-gray-300 dark:border-gray-600'} 
      bg-white dark:bg-gray-800 
      text-gray-900 dark:text-white 
      focus:outline-none 
      ${error 
        ? 'focus:border-red-500 focus:ring-red-500 dark:focus:border-red-500 dark:focus:ring-red-400' 
        : 'focus:border-primary-500 focus:ring-primary-500 dark:focus:border-primary-500 dark:focus:ring-primary-400'} 
      ${startIcon ? 'pl-10' : 'pl-4'} 
      ${endIcon ? 'pr-10' : 'pr-4'} 
      ${getSizeClasses()}
    `;
    
    return (
      <div className={className}>
        <AccessibleLabel
          htmlFor={id}
          isRequired={isRequired}
          error={error}
          helpText={helpText}
        >
          {label}
        </AccessibleLabel>
        
        <div className="relative">
          {startIcon && (
            <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none text-gray-500 dark:text-gray-400">
              {startIcon}
            </div>
          )}
          
          <input
            ref={ref}
            id={id}
            aria-invalid={!!error}
            aria-describedby={descriptionId}
            required={isRequired}
            className={inputClasses}
            {...props}
          />
          
          {endIcon && (
            <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none text-gray-500 dark:text-gray-400">
              {endIcon}
            </div>
          )}
        </div>
        
        {error && (
          <p className="mt-1 text-sm text-red-600 dark:text-red-400" id={`${id}-error`} aria-live="polite">
            {error}
          </p>
        )}
        
        {!error && helpText && (
          <p className="mt-1 text-sm text-gray-500 dark:text-gray-400" id={`${id}-description`}>
            {helpText}
          </p>
        )}
      </div>
    );
  }
);

AccessibleInput.displayName = 'AccessibleInput';

/**
 * 无障碍复选框组件
 */
interface AccessibleCheckboxProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type'> {
  label: string;
  error?: string;
  helpText?: string;
  isRequired?: boolean;
}

export const AccessibleCheckbox = forwardRef<HTMLInputElement, AccessibleCheckboxProps>(
  (
    {
      label,
      error,
      helpText,
      className = '',
      isRequired = false,
      id: propId,
      ...props
    },
    ref
  ) => {
    // Chinese comment replaced with English comment
    const generatedId = useId();
    const id = propId || `checkbox-${generatedId}`;
    const descriptionId = error ? `${id}-error` : helpText ? `${id}-description` : undefined;
    
    return (
      <div className={`flex items-start ${className}`}>
        <div className="flex h-5 items-center">
          <input
            ref={ref}
            id={id}
            type="checkbox"
            aria-invalid={!!error}
            aria-describedby={descriptionId}
            required={isRequired}
            className="h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-800 dark:focus:ring-primary-400"
            {...props}
          />
        </div>
        
        <div className="ml-3 text-sm">
          <label htmlFor={id} className="font-medium text-gray-700 dark:text-gray-300">
            {label}
            {isRequired && (
              <span className="ml-1 text-red-500" aria-hidden="true">
                *
              </span>
            )}
          </label>
          
          {helpText && (
            <p className="text-gray-500 dark:text-gray-400" id={`${id}-description`}>
              {helpText}
            </p>
          )}
          
          {error && (
            <p className="text-red-600 dark:text-red-400" id={`${id}-error`} aria-live="polite">
              {error}
            </p>
          )}
        </div>
      </div>
    );
  }
);

AccessibleCheckbox.displayName = 'AccessibleCheckbox';

/**
 * 无障碍开关组件
 */
interface AccessibleToggleProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type' | 'checked'> {
  label: string;
  isOn: boolean;
  onToggle: (isOn: boolean) => void;
  onLabel?: string;
  offLabel?: string;
  error?: string;
  helpText?: string;
  size?: 'small' | 'medium' | 'large';
}

export const AccessibleToggle = forwardRef<HTMLInputElement, AccessibleToggleProps>(
  (
    {
      label,
      isOn,
      onToggle,
      onLabel = '开',
      offLabel = '关',
      error,
      helpText,
      className = '',
      size = 'medium',
      id: propId,
      ...props
    },
    ref
  ) => {
    // Chinese comment replaced with English comment
    const generatedId = useId();
    const id = propId || `toggle-${generatedId}`;
    const descriptionId = error ? `${id}-error` : helpText ? `${id}-description` : undefined;
    
    // Chinese comment replaced with English comment
    const getSizeClasses = () => {
      switch (size) {
        case 'small':
          return {
            switch: 'w-8 h-4',
            dot: 'h-3 w-3',
            translateX: 'translate-x-4'
          };
        case 'large':
          return {
            switch: 'w-14 h-7',
            dot: 'h-6 w-6',
            translateX: 'translate-x-7'
          };
        case 'medium':
        default:
          return {
            switch: 'w-11 h-6',
            dot: 'h-5 w-5',
            translateX: 'translate-x-5'
          };
      }
    };
    
    const sizeClasses = getSizeClasses();
    
    const handleKeyDown = (e: KeyboardEvent<HTMLButtonElement>) => {
      if (e.key === ' ' || e.key === 'Enter') {
        e.preventDefault();
        onToggle(!isOn);
      }
    };
    
    return (
      <div className={className}>
        <div className="flex items-center">
          <button
            type="button"
            role="switch"
            aria-checked={isOn}
            aria-labelledby={`${id}-label`}
            aria-describedby={descriptionId}
            onClick={() => onToggle(!isOn)}
            onKeyDown={handleKeyDown}
            className={`
              relative inline-flex flex-shrink-0 
              rounded-full border-2 border-transparent 
              transition-colors duration-200 ease-in-out 
              focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2
              ${isOn ? 'bg-primary-600' : 'bg-gray-200 dark:bg-gray-700'}
              ${sizeClasses.switch}
            `}
          >
            <span className="sr-only">{isOn ? onLabel : offLabel}</span>
            <span
              className={`
                pointer-events-none inline-block rounded-full 
                bg-white shadow transform ring-0 transition duration-200 ease-in-out
                ${isOn ? sizeClasses.translateX : 'translate-x-0'}
                ${sizeClasses.dot}
              `}
            />
          </button>
          
          <span className="ml-3" id={`${id}-label`}>
            <span className="text-sm font-medium text-gray-900 dark:text-gray-100">{label}</span>
          </span>
        </div>
        
        {helpText && (
          <p className="mt-1 text-sm text-gray-500 dark:text-gray-400" id={`${id}-description`}>
            {helpText}
          </p>
        )}
        
        {error && (
          <p className="mt-1 text-sm text-red-600 dark:text-red-400" id={`${id}-error`} aria-live="polite">
            {error}
          </p>
        )}
        
        <input
          ref={ref}
          type="checkbox"
          id={id}
          className="sr-only"
          checked={isOn}
          onChange={e => onToggle(e.target.checked)}
          aria-hidden="true"
          tabIndex={-1}
          {...props}
        />
      </div>
    );
  }
);

AccessibleToggle.displayName = 'AccessibleToggle';

/**
 * 无障碍对话框组件
 * 实现WCAG 2.1 对话框标准
 */
interface AccessibleDialogProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  description?: string;
  children: ReactNode;
  closeOnEsc?: boolean;
  closeOnOutsideClick?: boolean;
  size?: 'small' | 'medium' | 'large' | 'full';
  className?: string;
}

export const AccessibleDialog: React.FC<AccessibleDialogProps> = ({
  isOpen,
  onClose,
  title,
  description,
  children,
  closeOnEsc = true,
  closeOnOutsideClick = true,
  size = 'medium',
  className = ''
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const dialogRef = useRef<HTMLDivElement>(null);
  const previousFocusRef = useRef<HTMLElement | null>(null);
  const titleId = useId();
  const descriptionId = useId();
  
  // Chinese comment replaced with English comment
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!isOpen) return;
      
      if (e.key === 'Escape' && closeOnEsc) {
        onClose();
      }
    };
    
    document.addEventListener('keydown', handleKeyDown as any);
    return () => document.removeEventListener('keydown', handleKeyDown as any);
  }, [isOpen, closeOnEsc, onClose]);
  
  // Chinese comment replaced with English comment
  useEffect(() => {
    const handleOutsideClick = (e: MouseEvent) => {
      if (
        closeOnOutsideClick &&
        dialogRef.current &&
        e.target instanceof Node &&
        !dialogRef.current.contains(e.target)
      ) {
        onClose();
      }
    };
    
    if (isOpen) {
      document.addEventListener('mousedown', handleOutsideClick);
    }
    
    return () => {
      document.removeEventListener('mousedown', handleOutsideClick);
    };
  }, [isOpen, closeOnOutsideClick, onClose]);
  
  // Chinese comment replaced with English comment
  useEffect(() => {
    if (isOpen) {
      previousFocusRef.current = document.activeElement as HTMLElement;
      
      // Chinese comment replaced with English comment
      const timer = setTimeout(() => {
        setIsVisible(true);
        
        // Chinese comment replaced with English comment
        if (dialogRef.current) {
          const focusableElements = dialogRef.current.querySelectorAll(
            'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
          );
          
          if (focusableElements.length > 0) {
            (focusableElements[0] as HTMLElement).focus();
          } else {
            dialogRef.current.focus();
          }
        }
      }, 50);
      
      return () => clearTimeout(timer);
    } else {
      setIsVisible(false);
      
      // Chinese comment replaced with English comment
      if (previousFocusRef.current) {
        previousFocusRef.current.focus();
      }
    }
  }, [isOpen]);
  
  // Chinese comment replaced with English comment
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }
    
    return () => {
      document.body.style.overflow = '';
    };
  }, [isOpen]);
  
  // Chinese comment replaced with English comment
  if (!isOpen) {
    return null;
  }
  
  // Chinese comment replaced with English comment
  const getSizeClasses = () => {
    switch (size) {
      case 'small':
        return 'max-w-md';
      case 'large':
        return 'max-w-3xl';
      case 'full':
        return 'max-w-full m-4';
      case 'medium':
      default:
        return 'max-w-lg';
    }
  };
  
  return (
    <div
      className={`
        fixed inset-0 z-50 flex items-center justify-center overflow-y-auto
        bg-gray-900 bg-opacity-75 transition-opacity
        ${isVisible ? 'opacity-100' : 'opacity-0'}
      `}
      role="dialog"
      aria-modal="true"
      aria-labelledby={titleId}
      aria-describedby={description ? descriptionId : undefined}
    >
      <div
        ref={dialogRef}
        className={`
          w-full ${getSizeClasses()} bg-white dark:bg-gray-800
          rounded-lg shadow-xl transform transition-all
          ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-4 opacity-0'}
          ${className}
        `}
        tabIndex={-1}
      >
        <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h2 id={titleId} className="text-xl font-semibold text-gray-900 dark:text-white">
            {title}
          </h2>
          {description && (
            <p id={descriptionId} className="mt-1 text-sm text-gray-500 dark:text-gray-400">
              {description}
            </p>
          )}
        </div>
        
        <div className="p-6">{children}</div>
        
        <div className="px-6 py-4 border-t border-gray-200 dark:border-gray-700 flex justify-end space-x-3">
          <AccessibleButton
            variant="ghost"
            onClick={onClose}
            aria-label="关闭对话框"
          >
            Cancel
          </AccessibleButton>
        </div>
      </div>
    </div>
  );
};

/**
 * 无障碍SkipLink组件
 * 允许键盘User直接跳转到主要Content
 */
interface SkipLinkProps {
  target?: string;
  label?: string;
  className?: string;
}

export const SkipLink: React.FC<SkipLinkProps> = ({
  target = '#main-content',
  label = '跳到主要Content',
  className = ''
}) => {
  return (
    <a
      href={target}
      className={`
        sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4
        z-50 p-2 bg-primary-600 text-white rounded
        focus:outline-none focus:ring-2 focus:ring-primary-500
        ${className}
      `}
    >
      {label}
    </a>
  );
};

/**
 * 无障碍屏幕阅读器文本
 * 仅对屏幕阅读器可见，对视觉User隐藏
 */
interface ScreenReaderOnlyProps {
  children: ReactNode;
  as?: keyof JSX.IntrinsicElements;
  className?: string;
}

export const ScreenReaderOnly: React.FC<ScreenReaderOnlyProps> = ({
  children,
  as: Component = 'span',
  className = ''
}) => {
  return (
    <Component className={`sr-only ${className}`}>
      {children}
    </Component>
  );
};

export default {
  AccessibleButton,
  AccessibleLabel,
  AccessibleInput,
  AccessibleCheckbox,
  AccessibleToggle,
  AccessibleDialog,
  SkipLink,
  ScreenReaderOnly
}; 