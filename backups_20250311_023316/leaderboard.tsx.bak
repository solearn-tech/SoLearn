import React, { useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { FiAward, FiClock, FiBook, FiUser, FiChevronUp, FiChevronDown, FiSearch } from 'react-icons/fi';
import { WalletContextProvider, useWallet } from '../contexts/WalletContext';

// Chinese comment replaced with English comment
type TimeRange = 'weekly' | 'monthly' | 'allTime';

// Chinese comment replaced with English comment
type LeaderboardCategory = 'xp' | 'courses' | 'learn_token' | 'activity';

// Chinese comment replaced with English comment
interface UserRanking {
  id: string;
  rank: number;
  name: string;
  avatar: string;
  level: number;
  xp: number;
  completedCourses: number;
  learnTokens: number;
  learningStreak: number;
  isCurrentUser: boolean;
  rankChange?: number;
}

// Chinese comment replaced with English comment
const mockRankings: UserRanking[] = [
  {
    id: 'user1',
    rank: 1,
    name: '区块链大师',
    avatar: '/images/avatars/user1.jpg',
    level: 12,
    xp: 4850,
    completedCourses: 15,
    learnTokens: 2400,
    learningStreak: 45,
    isCurrentUser: false,
    rankChange: 0
  },
  {
    id: 'user2',
    rank: 2,
    name: 'Solana爱好者',
    avatar: '/images/avatars/user2.jpg',
    level: 10,
    xp: 3980,
    completedCourses: 12,
    learnTokens: 1850,
    learningStreak: 30,
    isCurrentUser: false,
    rankChange: 1
  },
  {
    id: 'user3',
    rank: 3,
    name: '加密新锐',
    avatar: '/images/avatars/user3.jpg',
    level: 9,
    xp: 3600,
    completedCourses: 10,
    learnTokens: 1700,
    learningStreak: 25,
    isCurrentUser: true,
    rankChange: -1
  },
  {
    id: 'user4',
    rank: 4,
    name: 'Web3开发者',
    avatar: '/images/avatars/user4.jpg',
    level: 8,
    xp: 3200,
    completedCourses: 9,
    learnTokens: 1500,
    learningStreak: 22,
    isCurrentUser: false,
    rankChange: 2
  },
  {
    id: 'user5',
    rank: 5,
    name: '智能合约大师',
    avatar: '/images/avatars/user5.jpg',
    level: 7,
    xp: 2800,
    completedCourses: 8,
    learnTokens: 1300,
    learningStreak: 18,
    isCurrentUser: false,
    rankChange: -1
  },
  {
    id: 'user6',
    rank: 6,
    name: 'DeFi研究员',
    avatar: '/images/avatars/user6.jpg',
    level: 6,
    xp: 2450,
    completedCourses: 7,
    learnTokens: 1150,
    learningStreak: 15,
    isCurrentUser: false,
    rankChange: 1
  },
  {
    id: 'user7',
    rank: 7,
    name: 'NFT创Author',
    avatar: '/images/avatars/user7.jpg',
    level: 5,
    xp: 2100,
    completedCourses: 6,
    learnTokens: 980,
    learningStreak: 12,
    isCurrentUser: false,
    rankChange: 3
  },
  {
    id: 'user8',
    rank: 8,
    name: '区块链新手',
    avatar: '/images/avatars/user8.jpg',
    level: 4,
    xp: 1750,
    completedCourses: 5,
    learnTokens: 820,
    learningStreak: 10,
    isCurrentUser: false,
    rankChange: -2
  },
  {
    id: 'user9',
    rank: 9,
    name: '加密学习者',
    avatar: '/images/avatars/user9.jpg',
    level: 3,
    xp: 1400,
    completedCourses: 4,
    learnTokens: 650,
    learningStreak: 8,
    isCurrentUser: false,
    rankChange: 0
  },
  {
    id: 'user10',
    rank: 10,
    name: '区块链探索者',
    avatar: '/images/avatars/user10.jpg',
    level: 2,
    xp: 950,
    completedCourses: 3,
    learnTokens: 450,
    learningStreak: 5,
    isCurrentUser: false,
    rankChange: 5
  }
];

// Chinese comment replaced with English comment
const LeaderboardPage = () => {
  const { connected } = useWallet();
  const [timeRange, setTimeRange] = useState<TimeRange>('weekly');
  const [category, setCategory] = useState<LeaderboardCategory>('xp');
  const [searchQuery, setSearchQuery] = useState('');
  
  // Chinese comment replaced with English comment
  const currentUserRanking = mockRankings.find(user => user.isCurrentUser);
  
  // Chinese comment replaced with English comment
  const getSortedRankings = () => {
    // Chinese comment replaced with English comment
    // Chinese comment replaced with English comment
    
    let result = [...mockRankings];
    
    // Chinese comment replaced with English comment
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter(user => 
        user.name.toLowerCase().includes(query)
      );
    }
    
    // Chinese comment replaced with English comment
    switch (category) {
      case 'xp':
        result.sort((a, b) => b.xp - a.xp);
        break;
      case 'courses':
        result.sort((a, b) => b.completedCourses - a.completedCourses);
        break;
      case 'learn_token':
        result.sort((a, b) => b.learnTokens - a.learnTokens);
        break;
      case 'activity':
        result.sort((a, b) => b.learningStreak - a.learningStreak);
        break;
    }
    
    // Chinese comment replaced with English comment
    return result.map((user, index) => ({
      ...user,
      rank: index + 1
    }));
  };
  
  // Chinese comment replaced with English comment
  const getRankChangeDisplay = (change?: number) => {
    if (!change || change === 0) {
      return { icon: null, className: 'text-gray-400' };
    }
    
    if (change > 0) {
      return { 
        icon: <FiChevronUp size={16} />, 
        className: 'text-green-500 dark:text-green-400'
      };
    }
    
    return { 
      icon: <FiChevronDown size={16} />, 
      className: 'text-red-500 dark:text-red-400'
    };
  };
  
  // Chinese comment replaced with English comment
  const getCategoryValue = (user: UserRanking) => {
    switch (category) {
      case 'xp':
        return `${user.xp} XP`;
      case 'courses':
        return `${user.completedCourses} Course`;
      case 'learn_token':
        return `${user.learnTokens} $LEARN`;
      case 'activity':
        return `${user.learningStreak} 天`;
      default:
        return `${user.xp} XP`;
    }
  };
  
  // Chinese comment replaced with English comment
  const getCategoryIcon = () => {
    switch (category) {
      case 'xp':
        return <FiAward className="text-yellow-500" />;
      case 'courses':
        return <FiBook className="text-blue-500" />;
      case 'learn_token':
        return <span className="text-green-500">$</span>;
      case 'activity':
        return <FiClock className="text-purple-500" />;
      default:
        return <FiAward className="text-yellow-500" />;
    }
  };
  
  const sortedRankings = getSortedRankings();

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <Head>
        <title>排行榜 | SoLearn</title>
        <meta name="description" content="View SoLearn 平台上的User排名和学习成果" />
      </Head>

      <main className="container mx-auto px-4 py-8">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">学习排行榜</h1>
            <p className="text-gray-600 dark:text-gray-400">
              看看谁在 SoLearn 平台上学习最积极，赢取最多Reward
            </p>
          </div>
          
          {/* 时间范围选择 */}
          <div className="mt-4 md:mt-0 bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-1 flex">
            <button
              onClick={() => setTimeRange('weekly')}
              className={`px-4 py-2 text-sm rounded-md ${
                timeRange === 'weekly'
                  ? 'bg-primary-100 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400 font-medium'
                  : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
              }`}
            >
              本周
            </button>
            <button
              onClick={() => setTimeRange('monthly')}
              className={`px-4 py-2 text-sm rounded-md ${
                timeRange === 'monthly'
                  ? 'bg-primary-100 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400 font-medium'
                  : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
              }`}
            >
              本月
            </button>
            <button
              onClick={() => setTimeRange('allTime')}
              className={`px-4 py-2 text-sm rounded-md ${
                timeRange === 'allTime'
                  ? 'bg-primary-100 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400 font-medium'
                  : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
              }`}
            >
              全部
            </button>
          </div>
        </div>
        
        {/* 排行榜分类和Search栏 */}
        <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 mb-6">
          <div className="p-4 border-b border-gray-200 dark:border-gray-700">
            <div className="flex flex-col md:flex-row justify-between md:items-center space-y-4 md:space-y-0">
              {/* 分类选择 */}
              <div className="flex space-x-4">
                <button
                  onClick={() => setCategory('xp')}
                  className={`flex items-center px-3 py-2 rounded-md text-sm ${
                    category === 'xp'
                      ? 'bg-primary-100 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400 font-medium'
                      : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                  }`}
                >
                  <FiAward className="mr-2" />
                  经验值
                </button>
                <button
                  onClick={() => setCategory('courses')}
                  className={`flex items-center px-3 py-2 rounded-md text-sm ${
                    category === 'courses'
                      ? 'bg-primary-100 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400 font-medium'
                      : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                  }`}
                >
                  <FiBook className="mr-2" />
                  完成Course
                </button>
                <button
                  onClick={() => setCategory('learn_token')}
                  className={`flex items-center px-3 py-2 rounded-md text-sm ${
                    category === 'learn_token'
                      ? 'bg-primary-100 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400 font-medium'
                      : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                  }`}
                >
                  <span className="mr-2">$</span>
                  $LEARN 代币
                </button>
                <button
                  onClick={() => setCategory('activity')}
                  className={`flex items-center px-3 py-2 rounded-md text-sm ${
                    category === 'activity'
                      ? 'bg-primary-100 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400 font-medium'
                      : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                  }`}
                >
                  <FiClock className="mr-2" />
                  学习连续性
                </button>
              </div>
              
              {/* Search框 */}
              <div className="relative max-w-xs">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiSearch className="text-gray-400" />
                </div>
                <input
                  type="text"
                  className="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary-500 focus:border-primary-500"
                  placeholder="SearchUser..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
            </div>
          </div>
          
          {/* 排行榜表格 */}
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead className="bg-gray-50 dark:bg-gray-800">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                    排名
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                    User
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                    等级
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                    {category === 'xp' ? '经验值' : 
                     category === 'courses' ? '完成Course' : 
                     category === 'learn_token' ? '$LEARN 代币' : '学习连续性'}
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                    变化
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                {sortedRankings.map(user => {
                  const rankChange = getRankChangeDisplay(user.rankChange);
                  
                  return (
                    <tr 
                      key={user.id} 
                      className={user.isCurrentUser ? 'bg-primary-50 dark:bg-primary-900/20' : ''}
                    >
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          {user.rank <= 3 ? (
                            <div className={`w-8 h-8 flex items-center justify-center rounded-full mr-2 ${
                              user.rank === 1 ? 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-600 dark:text-yellow-400' :
                              user.rank === 2 ? 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400' :
                              'bg-amber-100 dark:bg-amber-900/30 text-amber-600 dark:text-amber-400'
                            }`}>
                              {user.rank}
                            </div>
                          ) : (
                            <div className="text-gray-500 dark:text-gray-400 w-8 text-center mr-2">
                              {user.rank}
                            </div>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 h-10 w-10 relative">
                            {user.avatar ? (
                              <Image
                                src={user.avatar}
                                alt={user.name}
                                width={40}
                                height={40}
                                className="rounded-full"
                              />
                            ) : (
                              <div className="h-10 w-10 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center">
                                <FiUser className="text-gray-500 dark:text-gray-400" />
                              </div>
                            )}
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900 dark:text-white">
                              {user.name}
                              {user.isCurrentUser && (
                                <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-primary-100 dark:bg-primary-900/30 text-primary-800 dark:text-primary-400">
                                  你
                                </span>
                              )}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900 dark:text-white font-medium">
                          Lv.{user.level}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center text-sm font-medium text-gray-900 dark:text-white">
                          <span className="inline-block mr-2">
                            {getCategoryIcon()}
                          </span>
                          {getCategoryValue(user)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className={`flex items-center text-sm ${rankChange.className}`}>
                          {rankChange.icon}
                          <span className="ml-1">{Math.abs(user.rankChange || 0)}</span>
                        </div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
        
        {/* 当前User排名Information卡片 */}
        {connected && currentUserRanking && (
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <h2 className="text-lg font-medium text-gray-900 dark:text-white mb-4">你的排名</h2>
            
            <div className="flex flex-col md:flex-row md:items-center md:space-x-6">
              <div className="flex items-center mb-4 md:mb-0">
                <div className="relative w-16 h-16 mr-4">
                  {currentUserRanking.avatar ? (
                    <Image
                      src={currentUserRanking.avatar}
                      alt={currentUserRanking.name}
                      layout="fill"
                      className="rounded-full"
                    />
                  ) : (
                    <div className="w-16 h-16 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center">
                      <FiUser className="text-gray-500 dark:text-gray-400" size={32} />
                    </div>
                  )}
                </div>
                
                <div>
                  <div className="text-xl font-bold text-gray-900 dark:text-white">
                    {currentUserRanking.name}
                  </div>
                  <div className="text-sm text-gray-500 dark:text-gray-400">
                    等级 {currentUserRanking.level}
                  </div>
                </div>
              </div>
              
              <div className="flex flex-wrap gap-6">
                <div>
                  <div className="text-sm text-gray-500 dark:text-gray-400">当前排名</div>
                  <div className="text-2xl font-bold text-gray-900 dark:text-white flex items-center">
                    #{currentUserRanking.rank}
                    <span className={`ml-2 text-sm ${getRankChangeDisplay(currentUserRanking.rankChange).className}`}>
                      {getRankChangeDisplay(currentUserRanking.rankChange).icon}
                      {Math.abs(currentUserRanking.rankChange || 0)}
                    </span>
                  </div>
                </div>
                
                <div>
                  <div className="text-sm text-gray-500 dark:text-gray-400">经验值</div>
                  <div className="text-2xl font-bold text-gray-900 dark:text-white">{currentUserRanking.xp}</div>
                </div>
                
                <div>
                  <div className="text-sm text-gray-500 dark:text-gray-400">完成Course</div>
                  <div className="text-2xl font-bold text-gray-900 dark:text-white">{currentUserRanking.completedCourses}</div>
                </div>
                
                <div>
                  <div className="text-sm text-gray-500 dark:text-gray-400">$LEARN 代币</div>
                  <div className="text-2xl font-bold text-gray-900 dark:text-white">{currentUserRanking.learnTokens}</div>
                </div>
                
                <div>
                  <div className="text-sm text-gray-500 dark:text-gray-400">学习连续天数</div>
                  <div className="text-2xl font-bold text-gray-900 dark:text-white">{currentUserRanking.learningStreak}</div>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* 连接钱包提示 */}
        {!connected && (
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 text-center">
            <p className="text-gray-600 dark:text-gray-400 mb-4">连接钱包以View你在排行榜中的位置</p>
            <button className="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg">
              连接钱包
            </button>
          </div>
        )}
      </main>
    </div>
  );
};

// Chinese comment replaced with English comment
export default function Leaderboard() {
  return (
    <WalletContextProvider>
      <LeaderboardPage />
    </WalletContextProvider>
  );
} 