import React, { useState, useEffect, ChangeEvent } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import { FiArrowLeft, FiStar, FiFilter, FiPlus, FiSearch } from 'react-icons/fi';
import { WalletContextProvider, useWallet, WalletContextProviderProps } from '../../../contexts/WalletContext';

import ReviewCard from '../../../components/reviews/ReviewCard';

// Chinese comment replaced with English comment
type ReviewFilterType = 'all' | 'positive' | 'negative' | 'with-comments';

// Chinese comment replaced with English comment
type ReviewSortType = 'recent' | 'helpful' | 'highest' | 'lowest';

// Chinese comment replaced with English comment
interface Author {
  id: string;
  name: string;
  avatar: string;
  level: number;
}

// Chinese comment replaced with English comment
interface Review {
  id: string;
  author: Author;
  rating: number;
  text: string;
  date: Date;
  isVerifiedPurchase: boolean;
  helpfulCount: number;
  unhelpfulCount: number;
  courseId: string;
  isUserReview: boolean;
}

// Chinese comment replaced with English comment
interface Course {
  id: string;
  title: string;
  instructor: {
    name: string;
    avatar: string;
  };
  averageRating: number;
  totalReviews: number;
  ratingDistribution: {
    [key: number]: number;
  };
}

// Chinese comment replaced with English comment
const mockReviews: Review[] = [
  {
    id: 'r1',
    author: {
      id: 'user1',
      name: '区块链新手',
      avatar: '/images/avatars/user1.jpg',
      level: 4
    },
    rating: 5,
    text: '这门Course对我了解 Solana 区块链非常有帮助。Instructor讲解清晰，Content全面且实用。特别是账户模型的讲解非常透彻，让我对 Solana 的架构有了更深入的理解。强烈推荐给想学习 Solana 开发的朋友！',
    date: new Date('2023-04-15'),
    isVerifiedPurchase: true,
    helpfulCount: 24,
    unhelpfulCount: 2,
    courseId: '1',
    isUserReview: false
  },
  {
    id: 'r2',
    author: {
      id: 'user2',
      name: '资深开发者',
      avatar: '/images/avatars/user2.jpg',
      level: 10
    },
    rating: 4,
    text: 'CourseContent丰富，但有些概念讲解可以再深入一些。作为有经验的开发者，我希望能看到更多高级主题。不过对于入门和中级开发者来说，这门Course绝对是很好的选择。',
    date: new Date('2023-04-10'),
    isVerifiedPurchase: true,
    helpfulCount: 18,
    unhelpfulCount: 3,
    courseId: '1',
    isUserReview: false
  },
  {
    id: 'r3',
    author: {
      id: 'user3',
      name: '加密爱好者',
      avatar: '/images/avatars/user3.jpg',
      level: 6
    },
    rating: 5,
    text: 'Instructor的解释非常清晰，尤其是关于 PDA 的部分，终于让我明白了这个概念。Course进度安排得也很合理，从基础到进阶，循序渐进。完成Course后确实有能力开发简单的 Solana 应用了！',
    date: new Date('2023-04-05'),
    isVerifiedPurchase: true,
    helpfulCount: 15,
    unhelpfulCount: 1,
    courseId: '1',
    isUserReview: true
  },
  {
    id: 'r4',
    author: {
      id: 'user4',
      name: '编程学习者',
      avatar: '/images/avatars/user4.jpg',
      level: 3
    },
    rating: 3,
    text: 'Content对初学者来说有点难，特别是 Rust 部分假设你已经有一定基础。希望能增加更多的基础知识讲解。不过项目实战部分做得很好，跟着做下来收获不少。',
    date: new Date('2023-03-28'),
    isVerifiedPurchase: true,
    helpfulCount: 10,
    unhelpfulCount: 5,
    courseId: '1',
    isUserReview: false
  },
  {
    id: 'r5',
    author: {
      id: 'user5',
      name: 'Web3初学者',
      avatar: '/images/avatars/user5.jpg',
      level: 2
    },
    rating: 5,
    text: '作为一个完全没有区块链开发经验的人，这门Course给了我很好的起点。视频质量高，讲解细致，练习充分。完成后对 Solana 生态有了全面了解，推荐！',
    date: new Date('2023-03-20'),
    isVerifiedPurchase: true,
    helpfulCount: 12,
    unhelpfulCount: 0,
    courseId: '1',
    isUserReview: false
  },
  {
    id: 'r6',
    author: {
      id: 'user6',
      name: 'Rust爱好者',
      avatar: '/images/avatars/user6.jpg',
      level: 7
    },
    rating: 4,
    text: 'Rust相关Content讲解很到位，但希望能更深入讲解 Solana 的底层机制。总体来说是很好的Course，值得推荐。',
    date: new Date('2023-03-15'),
    isVerifiedPurchase: true,
    helpfulCount: 8,
    unhelpfulCount: 1,
    courseId: '1',
    isUserReview: false
  },
  {
    id: 'r7',
    author: {
      id: 'user7',
      name: '区块链研究员',
      avatar: '/images/avatars/user7.jpg',
      level: 9
    },
    rating: 2,
    text: '对于已经有一定区块链开发经验的人来说，这门Course有点基础。我希望能看到更多关于高级主题的Content，如跨程序调用、自定义Error处理等。',
    date: new Date('2023-03-10'),
    isVerifiedPurchase: false,
    helpfulCount: 4,
    unhelpfulCount: 6,
    courseId: '1',
    isUserReview: false
  }
];

// Chinese comment replaced with English comment
const mockCourse: Course = {
  id: '1',
  title: 'Solana 区块链开发入门',
  instructor: {
    name: '张三',
    avatar: '/images/avatars/instructor1.jpg'
  },
  averageRating: 4.1,
  totalReviews: 125,
  ratingDistribution: {
    5: 75,
    4: 30,
    3: 12,
    2: 5,
    1: 3
  }
};

// Chinese comment replaced with English comment
const CourseReviewsPage: React.FC = () => {
  const router = useRouter();
  const { id } = router.query;
  const { connected } = useWallet();
  const [course, setCourse] = useState(mockCourse);
  const [reviews, setReviews] = useState(mockReviews);
  const [filteredReviews, setFilteredReviews] = useState(mockReviews);
  const [filterType, setFilterType] = useState<ReviewFilterType>('all');
  const [sortType, setSortType] = useState<ReviewSortType>('recent');
  const [searchQuery, setSearchQuery] = useState('');
  const [showReviewForm, setShowReviewForm] = useState(false);
  const [userReview, setUserReview] = useState<Review | undefined>(mockReviews.find(review => review.isUserReview));
  
  // Chinese comment replaced with English comment
  const calculateRatingPercentage = (rating: number) => {
    const count = course.ratingDistribution[rating] || 0;
    return (count / course.totalReviews) * 100;
  };
  
  // Chinese comment replaced with English comment
  useEffect(() => {
    let result = [...mockReviews];
    
    // Chinese comment replaced with English comment
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter((review) => 
        review.text.toLowerCase().includes(query) ||
        review.author.name.toLowerCase().includes(query)
      );
    }
    
    // Chinese comment replaced with English comment
    switch (filterType) {
      case 'positive':
        result = result.filter(review => review.rating >= 4);
        break;
      case 'negative':
        result = result.filter(review => review.rating <= 2);
        break;
      case 'with-comments':
        result = result.filter(review => review.text.length > 0);
        break;
      default:
        // Chinese comment replaced with English comment
        break;
    }
    
    // Chinese comment replaced with English comment
    switch (sortType) {
      case 'recent':
        result.sort((a, b) => b.date.getTime() - a.date.getTime());
        break;
      case 'helpful':
        result.sort((a, b) => b.helpfulCount - a.helpfulCount);
        break;
      case 'highest':
        result.sort((a, b) => b.rating - a.rating);
        break;
      case 'lowest':
        result.sort((a, b) => a.rating - b.rating);
        break;
      default:
        // Chinese comment replaced with English comment
        result.sort((a, b) => b.date.getTime() - a.date.getTime());
        break;
    }
    
    setFilteredReviews(result);
  }, [filterType, sortType, searchQuery]);
  
  // Chinese comment replaced with English comment
  const handleCreateReview = (newReview: Review) => {
    // Chinese comment replaced with English comment
    setUserReview(newReview);
    setShowReviewForm(false);
  };
  
  // Chinese comment replaced with English comment
  const handleEditReview = () => {
    setShowReviewForm(true);
  };
  
  // Chinese comment replaced with English comment
  const handleDeleteReview = () => {
    if (confirm('确定要Delete您的评价吗？')) {
      // Chinese comment replaced with English comment
      setUserReview(undefined);
      setFilteredReviews(filteredReviews.filter(review => !review.isUserReview));
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <Head>
        <title>Course评价 | {course.title}</title>
        <meta name="description" content={`View ${course.title} 的评价和评分`} />
      </Head>

      <main className="container mx-auto px-4 py-8">
        {/* 返回Course页和Title */}
        <div className="mb-8">
          <Link href={`/courses/${id}`}>
            <a className="flex items-center text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white mb-4">
              <FiArrowLeft className="mr-2" />
              返回Course页
            </a>
          </Link>
          
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">{course.title} - 学员评价</h1>
        </div>
        
        {/* 评分概览 */}
        <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* 平均评分 */}
            <div className="flex flex-col items-center justify-center">
              <div className="text-5xl font-bold text-gray-900 dark:text-white mb-2">
                {course.averageRating.toFixed(1)}
              </div>
              <div className="flex mb-1">
                {[1, 2, 3, 4, 5].map((star) => (
                  <FiStar
                    key={star}
                    className={`w-5 h-5 ${
                      star <= Math.round(course.averageRating)
                        ? 'text-yellow-400 fill-current'
                        : 'text-gray-300 dark:text-gray-600'
                    }`}
                  />
                ))}
              </div>
              <div className="text-sm text-gray-500 dark:text-gray-400">
                基于 {course.totalReviews} 个评价
              </div>
            </div>
            
            {/* 评分分布 */}
            <div className="col-span-2">
              <div className="space-y-3">
                {[5, 4, 3, 2, 1].map((rating) => (
                  <div key={rating} className="flex items-center">
                    <div className="flex items-center w-24">
                      <span className="text-sm text-gray-700 dark:text-gray-300 mr-2">
                        {rating} 星
                      </span>
                      <FiStar className="text-yellow-400 fill-current w-4 h-4" />
                    </div>
                    
                    <div className="flex-1 h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                      <div
                        className="h-2 bg-primary-600 rounded-full"
                        style={{ width: `${calculateRatingPercentage(rating)}%` }}
                      ></div>
                    </div>
                    
                    <div className="w-16 text-right text-sm text-gray-500 dark:text-gray-400">
                      {course.ratingDistribution[rating] || 0}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
        
        {/* 评价Filter和Sort */}
        <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-4 mb-6">
          <div className="flex flex-col md:flex-row justify-between md:items-center space-y-4 md:space-y-0">
            {/* Filter按钮 */}
            <div className="flex items-center space-x-2 overflow-x-auto pb-2 md:pb-0">
              <button
                onClick={() => setFilterType('all')}
                className={`px-4 py-2 rounded-lg text-sm ${
                  filterType === 'all'
                    ? 'bg-primary-100 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400 font-medium'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                }`}
              >
                全部评价
              </button>
              <button
                onClick={() => setFilterType('positive')}
                className={`px-4 py-2 rounded-lg text-sm ${
                  filterType === 'positive'
                    ? 'bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400 font-medium'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                }`}
              >
                好评 (4-5星)
              </button>
              <button
                onClick={() => setFilterType('negative')}
                className={`px-4 py-2 rounded-lg text-sm ${
                  filterType === 'negative'
                    ? 'bg-red-100 dark:bg-red-900/30 text-red-600 dark:text-red-400 font-medium'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                }`}
              >
                差评 (1-2星)
              </button>
              <button
                onClick={() => setFilterType('with-comments')}
                className={`px-4 py-2 rounded-lg text-sm ${
                  filterType === 'with-comments'
                    ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 font-medium'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                }`}
              >
                有CommentContent
              </button>
            </div>
            
            <div className="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4">
              {/* Sort下拉框 */}
              <div className="flex items-center">
                <FiFilter className="mr-2 text-gray-500 dark:text-gray-400" />
                <select
                  value={sortType}
                  onChange={(e: ChangeEvent<HTMLSelectElement>) => setSortType(e.target.value as ReviewSortType)}
                  className="bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-3 py-2 rounded-lg border-0 focus:ring-2 focus:ring-primary-500"
                >
                  <option value="recent">最新</option>
                  <option value="helpful">最有帮助</option>
                  <option value="highest">最高评分</option>
                  <option value="lowest">最低评分</option>
                </select>
              </div>
              
              {/* Search框 */}
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FiSearch className="text-gray-400" />
                </div>
                <input
                  type="text"
                  placeholder="Search评价..."
                  value={searchQuery}
                  onChange={(e: ChangeEvent<HTMLInputElement>) => setSearchQuery(e.target.value)}
                  className="pl-10 w-full bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-3 py-2 rounded-lg border-0 focus:ring-2 focus:ring-primary-500"
                />
              </div>
            </div>
          </div>
        </div>
        
        {/* 添加评价按钮 */}
        {connected && !userReview && !showReviewForm && (
          <div className="mb-6">
            <button
              onClick={() => setShowReviewForm(true)}
              className="flex items-center px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg shadow-sm"
            >
              <FiPlus className="mr-2" />
              添加评价
            </button>
          </div>
        )}
        
        {/* 评价创建/Edit表单 */}
        {connected && showReviewForm && (
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-6">
            <h2 className="text-xl font-medium text-gray-900 dark:text-white mb-4">
              {userReview ? 'Edit你的评价' : '添加评价'}
            </h2>
            
            {/* 评价表单 */}
            <form>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  评分
                </label>
                <div className="flex space-x-2">
                  {[1, 2, 3, 4, 5].map((star) => (
                    <button
                      key={star}
                      type="button"
                      className={`w-10 h-10 rounded-full focus:outline-none ${
                        star <= (userReview?.rating || 0)
                          ? 'bg-yellow-50 dark:bg-yellow-900/20 text-yellow-400 dark:text-yellow-300'
                          : 'bg-gray-100 dark:bg-gray-700 text-gray-400 dark:text-gray-500'
                      }`}
                    >
                      <FiStar className={star <= (userReview?.rating || 0) ? 'fill-current' : ''} />
                    </button>
                  ))}
                </div>
              </div>
              
              <div className="mb-4">
                <label htmlFor="reviewText" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  评价Content
                </label>
                <textarea
                  id="reviewText"
                  rows={5}
                  defaultValue={userReview?.text || ''}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:text-white"
                  placeholder="分享你对这门Course的体验和建议..."
                ></textarea>
              </div>
              
              <div className="flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => setShowReviewForm(false)}
                  className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700"
                >
                  Cancel
                </button>
                <button
                  type="button"
                  onClick={() => handleCreateReview(userReview as Review)}
                  className="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg shadow-sm"
                >
                  {userReview ? '更新评价' : 'Submit评价'}
                </button>
              </div>
            </form>
          </div>
        )}
        
        {/* 评价List */}
        {filteredReviews.length > 0 ? (
          <div className="space-y-6">
            {filteredReviews.map((review) => (
              <ReviewCard
                key={review.id}
                id={review.id}
                author={review.author}
                rating={review.rating}
                text={review.text}
                date={review.date}
                isVerifiedPurchase={review.isVerifiedPurchase}
                helpfulCount={review.helpfulCount}
                unhelpfulCount={review.unhelpfulCount}
                courseId={review.courseId}
                isUserReview={review.isUserReview}
                onEdit={review.isUserReview ? handleEditReview : undefined}
                onDelete={review.isUserReview ? handleDeleteReview : undefined}
              />
            ))}
          </div>
        ) : (
          <div className="text-center py-12 bg-white dark:bg-gray-800 rounded-lg shadow-sm">
            <p className="text-gray-500 dark:text-gray-400 mb-2">
              {searchQuery ? '没有找到匹配的评价' : 'None评价'}
            </p>
            <p className="text-gray-600 dark:text-gray-400">
              {searchQuery ? '尝试使用不同的Search词或清除Filter条件' : '成为第一个评价这门Course的人吧！'}
            </p>
          </div>
        )}
      </main>
    </div>
  );
};

// Chinese comment replaced with English comment
export default function CourseReviews() {
  return (
    <WalletContextProvider>
      <CourseReviewsPage />
    </WalletContextProvider>
  );
} 