import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { FixedSizeGrid } from 'react-window';
import InfiniteLoader from 'react-window-infinite-loader';
import AutoSizer from 'react-virtualized-auto-sizer';
import CourseCard from './CourseCard';
import LoadingState from '../common/LoadingState';
import { FiFilter, FiSearch, FiChevronDown } from 'react-icons/fi';

// Chinese comment replaced with English comment
export interface Course {
  id: string;
  title: string;
  description: string;
  thumbnailUrl?: string;
  level: 'beginner' | 'intermediate' | 'advanced';
  duration: number; // Chinese comment replaced with English comment
  rating: number;
  enrollmentCount: number;
  tokenReward: number;
  category: string;
  instructor: {
    id: string;
    name: string;
    avatar?: string;
  };
  tags: string[];
  updatedAt: Date;
}

// Chinese comment replaced with English comment
type SortOption = 'popular' | 'recent' | 'rating' | 'reward';
type FilterLevel = 'all' | 'beginner' | 'intermediate' | 'advanced';
type FilterCategory = 'all' | string;

interface CourseFilterState {
  searchTerm: string;
  level: FilterLevel;
  category: FilterCategory;
  sortBy: SortOption;
}

interface CourseListProps {
  courses: Course[];
  isLoading?: boolean;
  hasMore?: boolean;
  onLoadMore?: () => void;
  categories?: string[];
  onFilterChange?: (filters: CourseFilterState) => void;
}

// Chinese comment replaced with English comment
const MemoizedCourseCard = React.memo(CourseCard);

// Chinese comment replaced with English comment
interface CourseItemProps {
  course: Course;
  style: React.CSSProperties;
}

const CourseItem = React.memo(({ course, style }: CourseItemProps) => {
  return (
    <div style={style} className="p-3">
      <MemoizedCourseCard
        id={course.id}
        title={course.title}
        description={course.description}
        thumbnailUrl={course.thumbnailUrl}
        level={course.level}
        duration={course.duration}
        rating={course.rating}
        enrollmentCount={course.enrollmentCount}
        tokenReward={course.tokenReward}
        category={course.category}
      />
    </div>
  );
});

// Chinese comment replaced with English comment
const CourseList: React.FC<CourseListProps> = ({
  courses,
  isLoading = false,
  hasMore = false,
  onLoadMore,
  categories = [],
  onFilterChange
}) => {
  // Chinese comment replaced with English comment
  const [filters, setFilters] = useState<CourseFilterState>({
    searchTerm: '',
    level: 'all',
    category: 'all',
    sortBy: 'popular'
  });

  // Chinese comment replaced with English comment
  const [showFilters, setShowFilters] = useState(false);
  
  // Chinese comment replaced with English comment
  const [columnCount, setColumnCount] = useState(3);
  
  // Chinese comment replaced with English comment
  const filteredCourses = useMemo(() => {
    if (!courses.length) return [];
    
    let result = [...courses];
    
    // Chinese comment replaced with English comment
    if (filters.searchTerm) {
      const searchLower = filters.searchTerm.toLowerCase();
      result = result.filter(
        course => 
          course.title.toLowerCase().includes(searchLower) ||
          course.description.toLowerCase().includes(searchLower) ||
          course.tags.some(tag => tag.toLowerCase().includes(searchLower))
      );
    }
    
    // Chinese comment replaced with English comment
    if (filters.level !== 'all') {
      result = result.filter(course => course.level === filters.level);
    }
    
    // Chinese comment replaced with English comment
    if (filters.category !== 'all') {
      result = result.filter(course => course.category === filters.category);
    }
    
    // Chinese comment replaced with English comment
    switch (filters.sortBy) {
      case 'recent':
        result.sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());
        break;
      case 'rating':
        result.sort((a, b) => b.rating - a.rating);
        break;
      case 'reward':
        result.sort((a, b) => b.tokenReward - a.tokenReward);
        break;
      case 'popular':
      default:
        result.sort((a, b) => b.enrollmentCount - a.enrollmentCount);
        break;
    }
    
    return result;
  }, [courses, filters]);
  
  // Chinese comment replaced with English comment
  useEffect(() => {
    if (onFilterChange) {
      onFilterChange(filters);
    }
  }, [filters, onFilterChange]);
  
  // Chinese comment replaced with English comment
  useEffect(() => {
    const handleResize = () => {
      const width = window.innerWidth;
      if (width <= 640) {
        setColumnCount(1); // Chinese comment replaced with English comment
      } else if (width <= 1024) {
        setColumnCount(2); // Chinese comment replaced with English comment
      } else {
        setColumnCount(3); // Chinese comment replaced with English comment
      }
    };
    
    handleResize();
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  // Chinese comment replaced with English comment
  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setFilters(prev => ({ ...prev, searchTerm: e.target.value }));
  }, []);
  
  const handleLevelChange = useCallback((level: FilterLevel) => {
    setFilters(prev => ({ ...prev, level }));
  }, []);
  
  const handleCategoryChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilters(prev => ({ ...prev, category: e.target.value }));
  }, []);
  
  const handleSortChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilters(prev => ({ ...prev, sortBy: e.target.value as SortOption }));
  }, []);
  
  // Chinese comment replaced with English comment
  const itemSize = useMemo(() => ({
    width: 320,
    height: 400 // Chinese comment replaced with English comment
  }), []);
  
  // Chinese comment replaced with English comment
  const itemCount = filteredCourses.length + (hasMore ? 1 : 0);
  
  const isItemLoaded = useCallback((index: number) => {
    return !hasMore || index < filteredCourses.length;
  }, [hasMore, filteredCourses.length]);
  
  const loadMoreItems = useCallback(async () => {
    if (!isLoading && hasMore && onLoadMore) {
      await onLoadMore();
    }
  }, [isLoading, hasMore, onLoadMore]);
  
  // Chinese comment replaced with English comment
  const Cell = useCallback(({ columnIndex, rowIndex, style }: any) => {
    const index = rowIndex * columnCount + columnIndex;
    
    if (index >= filteredCourses.length) {
      if (hasMore && index === filteredCourses.length) {
        // Chinese comment replaced with English comment
        return (
          <div style={style} className="flex items-center justify-center p-4">
            <LoadingState size="small" text="Loading更多Course..." />
          </div>
        );
      }
      // Chinese comment replaced with English comment
      return null;
    }
    
    return <CourseItem course={filteredCourses[index]} style={style} />;
  }, [columnCount, filteredCourses, hasMore]);
  
  // Chinese comment replaced with English comment
  if (isLoading && filteredCourses.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center p-8">
        <LoadingState text="LoadingCourse中..." />
      </div>
    );
  }
  
  return (
    <div className="w-full">
      {/* Search和Filter栏 */}
      <div className="mb-6">
        <div className="flex flex-col lg:flex-row lg:items-center gap-4">
          {/* Search框 */}
          <div className="relative flex-grow">
            <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
              <FiSearch />
            </div>
            <input
              type="text"
              placeholder="SearchCourse..."
              value={filters.searchTerm}
              onChange={handleSearchChange}
              className="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            />
          </div>
          
          {/* Filter按钮 - 移动端 */}
          <div className="lg:hidden">
            <button 
              onClick={() => setShowFilters(!showFilters)}
              className="flex items-center px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg"
            >
              <FiFilter className="mr-2" />
              Filter
              <FiChevronDown className={`ml-2 transition-transform ${showFilters ? 'rotate-180' : ''}`} />
            </button>
          </div>
          
          {/* 桌面级别Filter按钮 */}
          <div className="hidden lg:flex space-x-2">
            <button 
              onClick={() => handleLevelChange('all')}
              className={`px-3 py-1.5 rounded-lg text-sm ${
                filters.level === 'all'
                  ? 'bg-primary-100 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400'
                  : 'bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600'
              }`}
            >
              全部级别
            </button>
            <button 
              onClick={() => handleLevelChange('beginner')}
              className={`px-3 py-1.5 rounded-lg text-sm ${
                filters.level === 'beginner'
                  ? 'bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400'
                  : 'bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600'
              }`}
            >
              初级
            </button>
            <button 
              onClick={() => handleLevelChange('intermediate')}
              className={`px-3 py-1.5 rounded-lg text-sm ${
                filters.level === 'intermediate'
                  ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400'
                  : 'bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600'
              }`}
            >
              中级
            </button>
            <button 
              onClick={() => handleLevelChange('advanced')}
              className={`px-3 py-1.5 rounded-lg text-sm ${
                filters.level === 'advanced'
                  ? 'bg-purple-100 dark:bg-purple-900/30 text-purple-600 dark:text-purple-400'
                  : 'bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600'
              }`}
            >
              高级
            </button>
          </div>
          
          {/* 桌面Sort下拉框 */}
          <div className="hidden lg:block">
            <select
              value={filters.sortBy}
              onChange={handleSortChange}
              className="px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg text-sm"
            >
              <option value="popular">最受欢迎</option>
              <option value="recent">最新Post</option>
              <option value="rating">最高评分</option>
              <option value="reward">最高Reward</option>
            </select>
          </div>
          
          {/* 桌面分类下拉框 */}
          <div className="hidden lg:block">
            <select
              value={filters.category}
              onChange={handleCategoryChange}
              className="px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg text-sm"
            >
              <option value="all">全部分类</option>
              {categories.map(category => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>
          </div>
        </div>
        
        {/* 移动端Filter菜单 */}
        {showFilters && (
          <div className="mt-4 p-4 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg lg:hidden">
            <div className="mb-4">
              <label className="block text-sm font-medium mb-1">级别</label>
              <div className="flex flex-wrap gap-2">
                <button 
                  onClick={() => handleLevelChange('all')}
                  className={`px-3 py-1.5 rounded-lg text-sm ${
                    filters.level === 'all'
                      ? 'bg-primary-100 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400'
                      : 'bg-gray-100 dark:bg-gray-700'
                  }`}
                >
                  全部
                </button>
                <button 
                  onClick={() => handleLevelChange('beginner')}
                  className={`px-3 py-1.5 rounded-lg text-sm ${
                    filters.level === 'beginner'
                      ? 'bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400'
                      : 'bg-gray-100 dark:bg-gray-700'
                  }`}
                >
                  初级
                </button>
                <button 
                  onClick={() => handleLevelChange('intermediate')}
                  className={`px-3 py-1.5 rounded-lg text-sm ${
                    filters.level === 'intermediate'
                      ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400'
                      : 'bg-gray-100 dark:bg-gray-700'
                  }`}
                >
                  中级
                </button>
                <button 
                  onClick={() => handleLevelChange('advanced')}
                  className={`px-3 py-1.5 rounded-lg text-sm ${
                    filters.level === 'advanced'
                      ? 'bg-purple-100 dark:bg-purple-900/30 text-purple-600 dark:text-purple-400'
                      : 'bg-gray-100 dark:bg-gray-700'
                  }`}
                >
                  高级
                </button>
              </div>
            </div>
            
            <div className="mb-4">
              <label htmlFor="mobile-category" className="block text-sm font-medium mb-1">分类</label>
              <select
                id="mobile-category"
                value={filters.category}
                onChange={handleCategoryChange}
                className="w-full px-3 py-2 bg-gray-100 dark:bg-gray-700 border-0 rounded-lg"
              >
                <option value="all">全部分类</option>
                {categories.map(category => (
                  <option key={category} value={category}>{category}</option>
                ))}
              </select>
            </div>
            
            <div>
              <label htmlFor="mobile-sort" className="block text-sm font-medium mb-1">Sort方式</label>
              <select
                id="mobile-sort"
                value={filters.sortBy}
                onChange={handleSortChange}
                className="w-full px-3 py-2 bg-gray-100 dark:bg-gray-700 border-0 rounded-lg"
              >
                <option value="popular">最受欢迎</option>
                <option value="recent">最新Post</option>
                <option value="rating">最高评分</option>
                <option value="reward">最高Reward</option>
              </select>
            </div>
          </div>
        )}
      </div>
      
      {/* 结果计数 */}
      <div className="mb-4 text-sm text-gray-600 dark:text-gray-400">
        找到 {filteredCourses.length} 个Course
        {filters.level !== 'all' && ` • 级别: ${filters.level === 'beginner' ? '初级' : 
          filters.level === 'intermediate' ? '中级' : '高级'}`}
        {filters.category !== 'all' && ` • 分类: ${filters.category}`}
      </div>
      
      {/* CourseList */}
      {filteredCourses.length === 0 ? (
        <div className="bg-white dark:bg-gray-800 rounded-lg p-8 text-center border border-gray-200 dark:border-gray-700">
          <div className="text-lg font-medium mb-2">没有找到匹配的Course</div>
          <p className="text-gray-600 dark:text-gray-400">
            尝试调整Search条件或浏览所有Course。
          </p>
        </div>
      ) : (
        <div className="h-screen max-h-[800px]">
          <AutoSizer>
            {({ height, width }) => {
              // Chinese comment replaced with English comment
              const itemWidth = itemSize.width;
              const actualColumns = Math.max(1, Math.floor(width / itemWidth));
              const itemsPerRow = Math.min(actualColumns, columnCount);
              const rowCount = Math.ceil(itemCount / itemsPerRow);
              
              return (
                <InfiniteLoader
                  isItemLoaded={isItemLoaded}
                  itemCount={itemCount}
                  loadMoreItems={loadMoreItems}
                >
                  {({ onItemsRendered, ref }) => (
                    <FixedSizeGrid
                      ref={ref}
                      columnCount={itemsPerRow}
                      columnWidth={width / itemsPerRow}
                      height={height}
                      rowCount={rowCount}
                      rowHeight={itemSize.height}
                      width={width}
                      onItemsRendered={gridProps => {
                        const { visibleRowStartIndex, visibleRowStopIndex } = gridProps;
                        
                        onItemsRendered({
                          visibleStartIndex: visibleRowStartIndex * itemsPerRow,
                          visibleStopIndex: (visibleRowStopIndex + 1) * itemsPerRow - 1
                        });
                      }}
                    >
                      {Cell}
                    </FixedSizeGrid>
                  )}
                </InfiniteLoader>
              );
            }}
          </AutoSizer>
        </div>
      )}
    </div>
  );
};

export default CourseList; 